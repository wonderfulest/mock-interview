import type { Question } from "../types";

export const batch: Question[] = [
  {
    id: "batch-1",
    track: "批量系统",
    difficulty: 1,
    prompt: "什么是批量任务系统？它与实时任务系统的区别是什么？",
    points: [
      "批量任务以离线、定时触发为主；实时任务为请求驱动",
      "批量任务适合大数据量、非交互型处理",
      "批量系统强调调度、容错、幂等；实时系统强调低延迟、高并发"
    ],
    answer:
      "批量系统是一类按时间或事件触发的任务处理系统，常用于数据汇总、清算、账务、统计等场景。\n" +
      "它不同于实时系统：实时任务响应用户请求立即执行，强调低延迟；而批量任务集中处理大规模数据，强调稳定性、可控性与可恢复性。",
    tags: ["批量任务", "实时任务", "调度系统"]
  },
  {
    id: "batch-2",
    track: "批量系统",
    difficulty: 2,
    prompt: "批量任务系统的核心组成模块有哪些？",
    points: [
      "调度模块（Schedule）",
      "任务执行模块（Executor）",
      "日志与监控模块",
      "任务依赖与重试机制",
      "并发防重与幂等机制"
    ],
    answer:
      "典型批量系统由五大核心模块组成：\n" +
      "1. 调度模块：负责任务触发、依赖控制；\n" +
      "2. 执行模块：负责任务运行与资源分配；\n" +
      "3. 日志与监控：用于任务追踪、失败定位；\n" +
      "4. 重试与恢复机制：保证任务可重跑、断点续跑；\n" +
      "5. 防重与幂等机制：确保任务多次执行结果一致。",
    tags: ["调度系统", "批量执行", "系统架构"]
  },
  {
    id: "batch-3",
    track: "批量系统",
    difficulty: 3,
    prompt: "请解释批量任务并发防重机制的设计原理及实现流程。",
    points: [
      "批量任务存在重跑、续跑、并发调度等场景，需防止重复执行导致的数据异常",
      "设计采用三层防重架构：调度层、任务入口层、执行层",
      "核心机制为防重唯一KEY入库判断，插入成功执行、失败中止",
      "KEY清理由定时任务完成"
    ],
    answer:
      "批量任务并发防重机制用于防止重复调度和重复执行。\n" +
      "三层设计：\n" +
      "1. 调度层防重复触发；\n" +
      "2. 任务入口层生成防重唯一KEY（流程实例号+任务名+分片号+重跑标记），插入防重表判断是否重复；\n" +
      "3. 执行层可采用业务表唯一索引或文件锁辅助。\n" +
      "插入成功继续执行，插入失败中止；异常未删除KEY由定时批清理。",
    tags: ["防重机制", "幂等性", "调度", "批量任务"]
  },
  {
    id: "batch-4",
    track: "批量系统",
    difficulty: 2,
    prompt: "批量任务如何设计重跑与续跑机制？",
    points: [
      "重跑：重新执行整个批次任务",
      "续跑：从中断点恢复执行未完成部分",
      "依赖防重KEY与中间结果保存",
      "POIN 等调度平台提供重跑接口"
    ],
    answer:
      "批量系统通常提供重跑与续跑机制：\n" +
      "重跑适用于全量重新执行，确保一致性；续跑适用于断点恢复，提高执行效率。\n" +
      "系统需持久化任务进度与防重KEY，以支持幂等和断点恢复，调度平台可通过接口自动识别执行模式。",
    tags: ["重跑机制", "续跑机制", "断点恢复"]
  },
  {
    id: "batch-5",
    track: "批量系统",
    difficulty: 3,
    prompt: "批量调度系统如何处理任务依赖与顺序执行？",
    points: [
      "依赖关系由 DAG（有向无环图）描述",
      "父任务完成后触发子任务",
      "支持并行与串行混合执行",
      "失败节点可重跑或人工干预"
    ],
    answer:
      "批量任务调度依赖 DAG 模型（Directed Acyclic Graph）。\n" +
      "系统根据任务依赖关系执行：当上游任务完成且成功，才会触发下游任务；支持多任务并发执行与串行链路控制。\n" +
      "对于失败节点，可通过重跑或跳过策略恢复整体流程。",
    tags: ["调度依赖", "DAG", "任务链路"]
  },
  {
    id: "batch-6",
    track: "批量系统",
    difficulty: 2,
    prompt: "批量任务系统中如何实现幂等性？",
    points: [
      "通过防重KEY、业务唯一索引控制",
      "任务结果写入前进行状态检测",
      "结合重跑与续跑机制确保一致性"
    ],
    answer:
      "批量任务幂等性保证多次执行结果一致。\n" +
      "实现方式包括：\n" +
      "1. 任务入口唯一KEY防重；\n" +
      "2. 业务层唯一约束（唯一索引、唯一文件名）；\n" +
      "3. 重跑/续跑时基于中间状态判断任务是否已执行完毕。",
    tags: ["幂等性", "防重", "事务一致性"]
  },
  {
    id: "batch-7",
    track: "批量系统",
    difficulty: 3,
    prompt: "批量任务如何保证执行可靠性与错误恢复？",
    points: [
      "支持重试机制与失败重调",
      "日志与监控系统记录执行轨迹",
      "支持断点续跑与数据校验",
      "失败后可人工干预或自动重调"
    ],
    answer:
      "批量系统通过多层机制保证可靠性：\n" +
      "1. 失败自动重试；\n" +
      "2. 调度系统监控状态与告警；\n" +
      "3. 支持断点续跑与结果校验；\n" +
      "4. 提供人工干预手段，必要时触发手动重跑。",
    tags: ["可靠性", "错误恢复", "重试机制"]
  },
  {
    id: "batch-8",
    track: "批量系统",
    difficulty: 3,
    prompt: "批量任务执行中如何避免文件并发冲突？",
    points: [
      "文件锁机制",
      "任务ID或分片号区分输出文件",
      "目录级隔离或时间戳命名",
      "结合防重KEY保证唯一执行"
    ],
    answer:
      "为避免文件型任务的并发冲突，常用机制包括：\n" +
      "1. 文件锁（如OS级FileLock或Redis分布式锁）；\n" +
      "2. 输出文件名带任务实例号或时间戳；\n" +
      "3. 执行前检测文件是否存在；\n" +
      "4. 配合防重KEY实现执行唯一性。",
    tags: ["文件锁", "并发控制", "任务隔离"]
  },
  {
    id: "batch-9",
    track: "批量系统",
    difficulty: 2,
    prompt: "批量调度平台（如POIN、Azkaban、Airflow）通常具备哪些核心功能？",
    points: [
      "任务调度与依赖管理",
      "任务重跑与监控告警",
      "资源分配与优先级控制",
      "日志追踪与执行统计"
    ],
    answer:
      "典型调度平台具备以下能力：\n" +
      "1. DAG 依赖调度；\n" +
      "2. 定时任务触发与优先级控制；\n" +
      "3. 异常告警与重试机制；\n" +
      "4. 执行日志追踪与历史记录查询。\n" +
      "代表产品包括 POIN、Azkaban、Airflow 等。",
    tags: ["调度平台", "Azkaban", "Airflow", "POIN"]
  },
  {
    id: "batch-10",
    track: "批量系统",
    difficulty: 3,
    prompt: "如何设计批量任务的日志与监控体系？",
    points: [
      "任务执行日志：记录输入、输出、状态",
      "任务运行指标：耗时、吞吐量、失败率",
      "异常告警：实时推送",
      "历史审计与回溯"
    ],
    answer:
      "批量系统日志与监控体系需覆盖：\n" +
      "1. 执行日志（输入参数、输出结果、状态码）；\n" +
      "2. 性能指标（执行时间、吞吐量、重试次数）；\n" +
      "3. 实时告警（任务失败、超时预警）；\n" +
      "4. 审计日志支持历史回溯和问题追踪。",
    tags: ["监控系统", "日志追踪", "可观测性"]
  },
  {
    id: "batch-11",
    track: "批量系统",
    difficulty: 3,
    prompt: "批量任务系统如何支持分布式执行？",
    points: [
      "通过任务分片并行执行",
      "使用分布式锁协调任务状态",
      "共享调度中心控制任务分发",
      "节点无状态化便于伸缩"
    ],
    answer:
      "分布式批量执行通常通过分片机制实现：任务被拆分为多个子任务在不同节点并行执行。\n" +
      "调度中心负责任务分发与协调，节点通过分布式锁和心跳机制确保状态一致，系统整体无状态以便水平扩展。",
    tags: ["分布式调度", "任务分片", "扩展性"]
  },
  {
    id: "batch-12",
    track: "批量系统",
    difficulty: 2,
    prompt: "批量任务的重试机制如何设计以避免重复执行？",
    points: [
      "结合防重KEY机制判断是否已执行",
      "设置最大重试次数与间隔时间",
      "重试策略需区分可重试与不可重试错误"
    ],
    answer:
      "重试机制应与防重机制结合。\n" +
      "在重试前，系统需检查防重KEY是否存在；存在则跳过执行。\n" +
      "重试次数与间隔可配置（如指数退避）。需识别幂等性风险，防止任务重复执行。",
    tags: ["重试机制", "防重机制", "幂等性"]
  },
  {
    id: "batch-13",
    track: "批量系统",
    difficulty: 3,
    prompt: "批量系统如何保证数据一致性？",
    points: [
      "事务控制与幂等校验",
      "分布式任务使用补偿机制",
      "防重KEY与业务唯一约束结合"
    ],
    answer:
      "数据一致性通过以下方式保障：\n" +
      "1. 单节点任务使用事务或行锁；\n" +
      "2. 分布式任务使用TCC或补偿机制；\n" +
      "3. 防重KEY与唯一索引双重保障。\n" +
      "在异常中断或重跑时保证最终一致。",
    tags: ["一致性", "事务控制", "补偿机制"]
  },
  {
    id: "batch-14",
    track: "批量系统",
    difficulty: 4,
    prompt: "如何处理批量系统中断点续跑的状态管理？",
    points: [
      "保存执行进度（分片号、偏移量、批次号）",
      "断点数据持久化到中间表或Redis",
      "续跑时从中断位置恢复"
    ],
    answer:
      "断点续跑需持久化任务执行状态：\n" +
      "包括批次号、分片号、数据偏移量等信息存储于中间表或缓存。\n" +
      "续跑时读取中间状态恢复执行，配合防重机制避免重复处理。",
    tags: ["断点续跑", "状态管理", "任务恢复"]
  },
  {
    id: "batch-15",
    track: "批量系统",
    difficulty: 2,
    prompt: "批量任务如何设计高可用调度架构？",
    points: [
      "调度中心主从或多活部署",
      "任务执行节点无状态化",
      "心跳检测与任务接管机制"
    ],
    answer:
      "高可用调度系统采用主从或多活架构：\n" +
      "调度中心通过Zookeeper/Etcd选主，任务节点无状态可随时接管执行。\n" +
      "系统通过心跳检测与状态同步实现容灾切换。",
    tags: ["高可用", "调度中心", "容灾"]
  },
  {
    id: "batch-16",
    track: "批量系统",
    difficulty: 4,
    prompt: "批量任务如何实现分片并发执行？",
    points: [
      "任务数据按分片键拆分",
      "分片参数下发给不同执行节点",
      "分片结果汇总合并"
    ],
    answer:
      "分片并发执行通过分片键划分数据范围，每个分片在不同节点或线程并行处理。\n" +
      "调度平台负责参数下发与结果合并，可显著提升处理吞吐。",
    tags: ["分片执行", "并行计算", "调度优化"]
  },
  {
    id: "batch-17",
    track: "批量系统",
    difficulty: 3,
    prompt: "批量系统中如何设计失败告警与回调机制？",
    points: [
      "失败日志触发告警事件",
      "告警可通过邮件、短信、Webhook推送",
      "回调接口可触发自动重跑或人工审批"
    ],
    answer:
      "批量系统应支持多渠道告警与回调：\n" +
      "失败事件由监控系统捕获，触发邮件/SMS/Webhook 通知；\n" +
      "支持自定义回调接口实现自动重跑或人工介入审批。",
    tags: ["告警机制", "回调接口", "任务监控"]
  },
  {
    id: "batch-18",
    track: "批量系统",
    difficulty: 3,
    prompt: "批量系统中如何设计定期清理机制以保证系统长期稳定？",
    points: [
      "定期清理防重KEY表",
      "按月/年truncate历史异常记录",
      "归档日志与执行记录"
    ],
    answer:
      "批量系统需设计定时清理任务：\n" +
      "1. 定期truncate防重KEY表清理残留数据；\n" +
      "2. 按周期归档历史日志；\n" +
      "3. 控制数据库表大小保持系统性能稳定。",
    tags: ["数据清理", "归档", "防重KEY"]
  },
  {
    id: "batch-19",
    track: "批量系统",
    difficulty: 4,
    prompt: "在高并发批量执行场景下，如何防止调度风暴？",
    points: [
      "采用调度限流与分批触发机制",
      "使用任务队列平滑执行",
      "优先级与依赖控制"
    ],
    answer:
      "调度风暴通常由大量任务同时触发导致资源争用。\n" +
      "解决方式包括：\n" +
      "1. 限流与分批调度；\n" +
      "2. 使用任务队列缓冲请求；\n" +
      "3. 动态调整优先级与并发度控制。",
    tags: ["调度风暴", "限流", "任务队列"]
  },
  {
    id: "batch-20",
    track: "批量系统",
    difficulty: 3,
    prompt: "如何评估和优化批量任务的执行性能？",
    points: [
      "分析瓶颈：IO、CPU、网络、锁等待",
      "通过分片并行化提升吞吐",
      "使用缓存、批量提交优化IO"
    ],
    answer:
      "性能优化需从执行路径入手：\n" +
      "1. 监控CPU、IO、网络延迟；\n" +
      "2. 使用分片并行与多线程；\n" +
      "3. 优化SQL批处理与IO写入；\n" +
           "4. 调整批次粒度与事务提交频率以平衡性能与资源占用。\n" +
      "通过周期性性能基线测试和监控指标分析（QPS、延迟、错误率），可持续优化批量任务执行效率。",
    tags: ["性能优化", "吞吐量", "批处理优化"]
  },
  {
    id: "batch-21",
    track: "批量系统",
    difficulty: 4,
    prompt: "请解释批量系统中的任务分级与优先级调度策略。",
    points: [
      "根据任务重要性划分等级（核心任务/辅助任务）",
      "高优先级任务优先调度",
      "资源配额控制不同等级任务的占用比例",
      "支持抢占与非抢占模式"
    ],
    answer:
      "批量系统通过任务分级与优先级策略确保关键任务先执行：\n" +
      "1. 按任务类型划分等级（核心账务、报表、辅助分析等）；\n" +
      "2. 调度中心基于权重或优先级队列分配资源；\n" +
      "3. 关键任务可使用抢占式调度保障时效性；\n" +
      "4. 支持动态调度调整，防止资源长时间被低优任务占用。",
    tags: ["优先级调度", "任务分级", "资源管理"]
  },
  {
    id: "batch-22",
    track: "批量系统",
    difficulty: 4,
    prompt: "批量系统如何设计全链路追踪与问题定位机制？",
    points: [
      "任务执行全程日志追踪（traceId）",
      "上下游任务调用链可视化",
      "异常堆栈与上下文信息归档",
      "结合监控平台（如Instana、Sofa-Tracer）"
    ],
    answer:
      "批量系统可通过全链路追踪机制实现快速问题定位：\n" +
      "1. 调度、执行、存储各环节生成统一traceId；\n" +
      "2. 构建任务调用链视图展示上下游依赖；\n" +
      "3. 异常日志与上下文信息统一归档；\n" +
      "4. 可对接链路追踪系统（如 Instana、Sofa-Tracer）进行可视化分析。",
    tags: ["链路追踪", "可观测性", "问题定位"]
  },
  {
    id: "batch-23",
    track: "批量系统",
    difficulty: 5,
    prompt: "如何设计支持多租户的批量任务调度系统？",
    points: [
      "任务表与调度配置隔离（tenant_id）",
      "租户级资源配额与限流",
      "任务执行节点多租户隔离",
      "租户间安全与数据隔离控制"
    ],
    answer:
      "多租户批量调度系统设计重点在于隔离与配额：\n" +
      "1. 在任务表和配置层面引入tenant_id字段；\n" +
      "2. 每个租户拥有独立的资源池与任务队列；\n" +
      "3. 调度中心需支持租户级限流与优先级；\n" +
      "4. 通过认证与数据隔离机制防止越权访问。",
    tags: ["多租户", "调度系统", "资源隔离"]
  },
  {
    id: "batch-24",
    track: "批量系统",
    difficulty: 5,
    prompt: "在分布式批量系统中，如何处理节点宕机或任务漂移？",
    points: [
      "任务状态定期上报调度中心",
      "节点心跳检测失效自动接管任务",
      "任务漂移机制：未完成任务重新分配至存活节点"
    ],
    answer:
      "节点宕机时，调度中心检测到心跳丢失，会触发任务漂移机制：\n" +
      "1. 将未完成任务状态标记为失效；\n" +
      "2. 将任务重新分配至可用节点继续执行；\n" +
      "3. 结合幂等和防重机制确保任务不会重复执行。",
    tags: ["节点容灾", "任务漂移", "高可用"]
  },
  {
    id: "batch-25",
    track: "批量系统",
    difficulty: 4,
    prompt: "批量任务如何实现跨机房或跨区域的调度一致性？",
    points: [
      "主调度中心与备调度中心异地部署",
      "任务元数据多活同步（如MySQL+Binlog+MQ）",
      "防止跨区重复调度"
    ],
    answer:
      "跨机房批量调度需实现一致性控制：\n" +
      "1. 主备调度中心异地部署，通过全局锁控制任务唯一触发；\n" +
      "2. 任务元数据通过消息队列或CDC机制同步；\n" +
      "3. 使用防重KEY机制防止双区重复执行。",
    tags: ["多活架构", "异地容灾", "调度一致性"]
  },
  {
    id: "batch-26",
    track: "批量系统",
    difficulty: 3,
    prompt: "批量系统如何控制任务并发度和资源分配？",
    points: [
      "每类任务设置最大并发数",
      "通过线程池/分布式锁控制执行数量",
      "资源配额与优先级动态调整"
    ],
    answer:
      "批量系统通过并发控制策略实现资源平衡：\n" +
      "1. 为每个任务或任务组设定最大并发数；\n" +
      "2. 使用线程池或分布式信号量限制执行数量；\n" +
      "3. 调度中心实时监控系统负载，动态调整资源配额。",
    tags: ["并发控制", "资源分配", "线程池"]
  },
  {
    id: "batch-27",
    track: "批量系统",
    difficulty: 5,
    prompt: "批量系统如何在保证正确性的同时提升执行性能？",
    points: [
      "通过任务分片实现并行执行",
      "合理控制事务批次大小",
      "减少IO操作并使用批量提交",
      "防重机制与幂等逻辑优化"
    ],
    answer:
      "性能提升需兼顾正确性：\n" +
      "1. 分片并行化任务执行；\n" +
      "2. 控制事务粒度，避免锁竞争；\n" +
      "3. 采用批量写入与异步IO减少阻塞；\n" +
      "4. 在防重机制上减少数据库冲突（如批量KEY缓存）。",
    tags: ["性能优化", "正确性", "批量提交"]
  },
  {
    id: "batch-28",
    track: "批量系统",
    difficulty: 3,
    prompt: "批量任务如何实现任务级与实例级日志追踪？",
    points: [
      "任务级日志：记录整体执行情况",
      "实例级日志：记录单次运行详细信息",
      "支持按traceId或instanceId查询"
    ],
    answer:
      "日志追踪分为两层：\n" +
      "1. 任务级日志：用于统计任务执行次数、成功率；\n" +
      "2. 实例级日志：记录单次任务详细过程、异常栈；\n" +
      "日志系统需支持按traceId或instanceId快速定位问题。",
    tags: ["日志系统", "traceId", "任务实例"]
  },
  {
    id: "batch-29",
    track: "批量系统",
    difficulty: 2,
    prompt: "批量系统中如何定义任务状态流转？",
    points: [
      "常见状态：待调度、运行中、成功、失败、重试中、终止",
      "状态变更触发事件或告警",
      "状态流转记录用于审计"
    ],
    answer:
      "任务状态流转反映执行生命周期：\n" +
      "典型状态包括：Pending → Running → Success/Failed → Retrying → Terminated。\n" +
      "状态变更触发调度事件与告警，持久化用于审计与追踪。",
    tags: ["任务状态", "生命周期", "调度事件"]
  },
  {
    id: "batch-30",
    track: "批量系统",
    difficulty: 4,
    prompt: "在实际生产中，如何衡量批量任务系统的运行健康度？",
    points: [
      "监控成功率、平均执行时间、资源利用率",
      "失败任务数量与告警响应时长",
      "调度延迟与队列积压指标"
    ],
    answer:
      "衡量批量系统健康度的关键指标包括：\n" +
      "1. 成功率 ≥ 99.9%；\n" +
      "2. 平均执行时长符合SLA；\n" +
      "3. 调度延迟、任务积压及时恢复；\n" +
      "4. 异常响应时间低于设定阈值。\n" +
      "通过监控与告警系统实现持续健康评估。",
    tags: ["系统健康", "监控指标", "SLA"]
  }
];

    

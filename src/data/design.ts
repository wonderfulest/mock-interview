import type { Question } from "../types";

export const design: Question[] = [
  {
    id: "design-1",
    track: "系统设计",
    difficulty: 4,
    prompt:
      "设计一个“解耦的支付解锁码服务”（像 KiezelPay），要求高可用、可审计、防刷与对账。",
    points: [
      "核心对象：订单、设备、解锁码、签名/回调",
      "风控：限流、人机校验、黑名单、频控、签名",
      "可用性：多活、降级、幂等、补单与对账",
    ],
    answer:
      "拆分支付网关、订单服务、码服务、回调处理与对账任务；全链路签名与幂等键；多活读写隔离与消息保证至少一次，配合幂等去重；风控限流、人机验证；审计日志与每日对账闭环。",
    tags: ["支付", "风控", "对账"],
  },
  {
    id: "design-2",
    track: "系统设计",
    difficulty: 3,
    prompt:
      "如何设计“逻辑过期 + 后台异步刷新”的缓存组件？考虑并发竞争与可观测性。",
    points: [
      "value + expireAt(逻辑) + refreshing 标记",
      "单飞锁/互斥刷新、请求合并、抖动控制",
      "指标：命中率、回源率、刷新耗时、失败率",
    ],
    answer:
      "缓存项携带逻辑过期时间，读时若过期则返回旧值并尝试获取互斥锁触发异步刷新；刷新失败维持旧值并记录指标；通过请求合并降低回源风暴，并输出可观测指标与 trace。",
    tags: ["逻辑过期", "互斥刷新", "可观测性"],
  },
];
